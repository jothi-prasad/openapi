/**
 * Yanis Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openapitools.api;

import org.openapitools.model.Group;
import org.openapitools.model.GroupStub;
import org.openapitools.model.HeadlessUserStub;
import org.openapitools.model.User;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Yanis Api
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API tests for DefaultApi 
 */
public class DefaultApiTest {


    private DefaultApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("http://localhost:8080/v1", DefaultApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupGetTest() {
        //List<Group> response = api.unixgroupGet();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupNameGetTest() {
        String name = null;
        //Group response = api.unixgroupNameGet(name);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupNameMemberMembernameDeleteTest() {
        String name = null;
        String membername = null;
        //api.unixgroupNameMemberMembernameDelete(name, membername);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupNameMemberMembernamePutTest() {
        String name = null;
        String membername = null;
        //api.unixgroupNameMemberMembernamePut(name, membername);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupNamePutTest() {
        String name = null;
        GroupStub groupStub = null;
        //api.unixgroupNamePut(name, groupStub);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixgroupPostTest() {
        GroupStub groupStub = null;
        //Group response = api.unixgroupPost(groupStub);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixheadlessNameGetTest() {
        String name = null;
        //User response = api.unixheadlessNameGet(name);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * TODO - address questions about renaming
     *
     * disable/enable a unix headless user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixheadlessNamePutTest() {
        String name = null;
        HeadlessUserStub headlessUserStub = null;
        //api.unixheadlessNamePut(name, headlessUserStub);
        
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unixheadlessPostTest() {
        HeadlessUserStub headlessUserStub = null;
        //User response = api.unixheadlessPost(headlessUserStub);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetTest() {
        String type = null;
        //List<Users> response = api.userGet(type);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userNameGetTest() {
        String name = null;
        //User response = api.userNameGet(name);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
