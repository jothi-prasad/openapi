package org.openapitools.api;

import org.openapitools.model.Group;
import org.openapitools.model.GroupStub;
import org.openapitools.model.HeadlessUserStub;
import org.openapitools.model.User;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;
import io.swagger.jaxrs.PATCH;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Yanis Api
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/")
@Api(value = "/", description = "")
public interface DefaultApi  {

    @GET
    @Path("/unixgroup")
    @Produces({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of all unix groups", response = Group.class, responseContainer = "List") })
    public List<Group> unixgroupGet();

    @GET
    @Path("/unixgroup/{name}")
    @Produces({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "unixgroup details for the name provided", response = Group.class) })
    public Group unixgroupNameGet(@PathParam("name") String name);

    @DELETE
    @Path("/unixgroup/{name}/member/{membername}")
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    public void unixgroupNameMemberMembernameDelete(@PathParam("name") String name, @PathParam("membername") String membername);

    @PUT
    @Path("/unixgroup/{name}/member/{membername}")
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    public void unixgroupNameMemberMembernamePut(@PathParam("name") String name, @PathParam("membername") String membername);

    @PUT
    @Path("/unixgroup/{name}")
    @Consumes({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    public void unixgroupNamePut(@PathParam("name") String name, @Valid GroupStub groupStub);

    @POST
    @Path("/unixgroup")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "unixgroup created", response = Group.class) })
    public Group unixgroupPost(@Valid GroupStub groupStub);

    @GET
    @Path("/unixheadless/{name}")
    @Produces({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "headless details for the name provided", response = User.class) })
    public User unixheadlessNameGet(@PathParam("name") String name);

    /**
     * TODO - address questions about renaming
     *
     * disable/enable a unix headless user
     *
     */
    @PUT
    @Path("/unixheadless/{name}")
    @Consumes({ "application/json" })
    @ApiOperation(value = "TODO - address questions about renaming", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    public void unixheadlessNamePut(@PathParam("name") String name, @Valid HeadlessUserStub headlessUserStub);

    @POST
    @Path("/unixheadless")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "unix headless user created", response = User.class) })
    public User unixheadlessPost(@Valid HeadlessUserStub headlessUserStub);

    @GET
    @Path("/user")
    @Produces({ "application/json", "application/xml" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of all users", response = Users.class, responseContainer = "List") })
    public List<Users> userGet(@QueryParam("type")  @DefaultValue("headless")String type);

    @GET
    @Path("/user/{name}")
    @Produces({ "application/json", "application/xml" })
    @ApiOperation(value = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user details for the name provided", response = User.class) })
    public User userNameGet(@PathParam("name") String name);
}

